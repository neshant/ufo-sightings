plugins {
    // Apply the Kotlin JVM plugin to add support for Kotlin on the JVM.
    id 'org.jetbrains.kotlin.jvm' version '1.3.40'

    // Apply the application plugin to add support for building a CLI application.
    id 'application'

    id 'org.springframework.boot' version '2.1.4.RELEASE'
    id "org.asciidoctor.convert" version "1.5.3"
    id "io.spring.dependency-management" version "1.0.6.RELEASE"
    id "org.jetbrains.kotlin.plugin.spring" version "1.3.40"
    id "org.jetbrains.kotlin.plugin.jpa" version "1.3.40"
}


def env = project.hasProperty('env') ? project.property('env') : 'local'
def fullTestOutput = project.hasProperty('fullTestOutput') ? project.property('fullTestOutput') : true


repositories {
    jcenter()
    mavenCentral()
    maven { url "https://repo.spring.io/milestone" }
}

dependencies {
    compile group: 'org.jetbrains.kotlin', name: 'kotlin-reflect'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-web'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-webflux'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-validation'
    compile group: 'org.liquibase', name: 'liquibase-core', version: '3.6.3'
    compile 'org.springframework.boot:spring-boot-starter-integration'
    compile 'org.springframework.integration:spring-integration-jdbc'
    compile group: 'org.springframework.boot', name: 'spring-boot-devtools'
    compile group: 'com.fasterxml.jackson.module', name: 'jackson-module-kotlin'
    compile group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jdk8'


    runtime group: 'org.postgresql', name: 'postgresql', version: '42.2.5'
    testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test'
    testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.3.1'
    testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.3.1'

    // Use the Kotlin JDK 8 standard library.
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'

    // Use the Kotlin test library.
    testImplementation 'org.jetbrains.kotlin:kotlin-test'

    // Use the Kotlin JUnit integration.
    testImplementation 'org.jetbrains.kotlin:kotlin-test-junit'
}

task startServices(type: Exec) {
    group = 'Docker Services'
    description = 'Start docker containers used for development.'

    commandLine 'docker-compose', 'up', '-d'
}

task stopServices(type: Exec) {
    group = 'Docker Services'
    description = 'Stop docker containers used for development.'

    commandLine 'docker-compose', 'down'
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = "1.8"
        freeCompilerArgs = ["-Xjsr305=strict"]
    }
}

test {
    useJUnitPlatform()
    testLogging {
        if (fullTestOutput == true) {
            showStandardStreams = true
        }
        events "passed", "failed", "skipped"
    }

    if (project.hasProperty('env')) {
        systemProperties.put('spring.profiles.active', env)
    }
}

// make sure services are running for test and bootRun in a local environment
if (env == 'local') {
    test.dependsOn(startServices)
    bootRun.dependsOn(startServices)
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

// Define the main class for the application

mainClassName = 'com.project.ufosighting.UfoSightingApplicationKt'